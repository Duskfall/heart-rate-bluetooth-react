name: GitFlow Release Process

on:
  # Trigger for creating a release branch
  workflow_dispatch:
    inputs:
      action:
        description: 'Action to perform'
        required: true
        type: choice
        options:
          - create-release-branch
          - finalize-release
          - merge-to-develop
      version:
        description: 'Release version (e.g., 1.2.3)'
        required: true
      release_notes:
        description: 'Release notes (for GitHub release)'
        required: false
        default: ''
      release_branch:
        description: 'Release branch name (for merge-to-develop action)'
        required: false
        default: ''

  # Trigger for when a release branch is merged to master
  pull_request:
    types: [closed]
    branches:
      - master

jobs:
  # Job to create a new release branch from develop
  create-release-branch:
    if: github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'create-release-branch'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          ref: develop
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      - name: Create release branch
        id: create-branch
        run: |
          VERSION="${{ github.event.inputs.version }}"
          BRANCH_NAME="release/$VERSION"
          
          # Create and push the release branch
          git checkout -b $BRANCH_NAME
          git push origin $BRANCH_NAME
          echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT

      - name: Create PR to master
        id: create-pr-master
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ steps.create-branch.outputs.branch_name }}
          base: master
          title: "Release v${{ github.event.inputs.version }}"
          body: |
            # Release v${{ github.event.inputs.version }}
            
            This PR was automatically created by the GitFlow release process.
            
            ## Steps to finalize this release:
            1. Make any necessary adjustments to this release branch
            2. Run tests and ensure everything is working correctly
            3. Merge this PR into `master` using "Create a merge commit" (not squash merge)
            
            After merging to `master`, the workflow will automatically:
            - Tag the release
            - Create a GitHub Release
            - Merge changes back to `develop`
            
            ## Release Notes
            ${{ github.event.inputs.release_notes }}
          labels: release

  # Job to finalize a release after the PR is merged to master
  finalize-release:
    if: (github.event_name == 'pull_request' && github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/')) || (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'finalize-release')
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Determine release version from branch name or input
      - name: Set version
        id: set-version
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # Extract version from release branch name (e.g., release/1.2.3 -> 1.2.3)
            BRANCH_NAME="${{ github.head_ref }}"
            VERSION="${BRANCH_NAME#release/}"
            echo "branch_name=$BRANCH_NAME" >> $GITHUB_OUTPUT
          else
            VERSION="${{ github.event.inputs.version }}"
            echo "branch_name=release/$VERSION" >> $GITHUB_OUTPUT
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Using version: $VERSION"

      # Tag the master branch with the release version
      - name: Create tag on master
        if: github.event_name == 'pull_request' && github.base_ref == 'master'
        run: |
          git tag -a "v${{ steps.set-version.outputs.version }}" -m "Release v${{ steps.set-version.outputs.version }}"
          git push origin "v${{ steps.set-version.outputs.version }}"

      # Extract release notes from PR description if available
      - name: Extract release notes
        if: github.event_name == 'pull_request'
        id: extract-notes
        run: |
          PR_BODY="${{ github.event.pull_request.body }}"
          if [[ "$PR_BODY" == *"## Release Notes"* ]]; then
            RELEASE_NOTES=$(echo "$PR_BODY" | sed -n '/## Release Notes/,/^$/p' | tail -n +2)
            echo "release_notes<<EOF" >> $GITHUB_OUTPUT
            echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
            echo "EOF" >> $GITHUB_OUTPUT
          else
            echo "release_notes=" >> $GITHUB_OUTPUT
          fi

      # Create GitHub Release
      - name: Create GitHub Release
        if: github.event_name == 'pull_request' && github.base_ref == 'master'
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.set-version.outputs.version }}
          name: Release v${{ steps.set-version.outputs.version }}
          body: ${{ steps.extract-notes.outputs.release_notes }}
          draft: false
          prerelease: false
          generate_release_notes: ${{ steps.extract-notes.outputs.release_notes == '' }}

      # Trigger the merge-to-develop workflow
      - name: Trigger merge back to develop
        if: github.event_name == 'pull_request' && github.base_ref == 'master'
        uses: peter-evans/repository-dispatch@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          event-type: merge-release-to-develop
          client-payload: '{"version": "${{ steps.set-version.outputs.version }}", "branch": "${{ steps.set-version.outputs.branch_name }}", "commit_sha": "${{ github.event.pull_request.merge_commit_sha }}"}'

  # Dedicated job for merging to develop (runs as a separate workflow to ensure proper merging)
  merge-to-develop:
    if: (github.event_name == 'workflow_dispatch' && github.event.inputs.action == 'merge-to-develop') || github.event.client_payload
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write

    steps:
      - name: Check out repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"

      # Set version and branch info
      - name: Set version info
        id: set-info
        run: |
          if [[ "${{ github.event_name }}" == "repository_dispatch" ]]; then
            VERSION="${{ github.event.client_payload.version }}"
            BRANCH="${{ github.event.client_payload.branch }}"
            COMMIT_SHA="${{ github.event.client_payload.commit_sha }}"
          else
            VERSION="${{ github.event.inputs.version }}"
            BRANCH="${{ github.event.inputs.release_branch }}"
            
            # If no branch specified, use release/VERSION format
            if [[ -z "$BRANCH" ]]; then
              BRANCH="release/$VERSION"
            fi
            
            # Get the latest commit on master matching the tag
            git fetch --tags
            COMMIT_SHA=$(git rev-list -n 1 "v$VERSION" || git rev-parse "origin/master")
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "branch=$BRANCH" >> $GITHUB_OUTPUT
          echo "commit_sha=$COMMIT_SHA" >> $GITHUB_OUTPUT

      # Make sure we have the latest develop
      - name: Update local develop
        run: |
          git fetch origin develop
          git checkout develop
          git pull origin develop

      # Perform the merge from master to develop using the merge commit
      - name: Merge to develop
        id: merge
        run: |
          # Create a temporary branch from the master merge commit
          COMMIT_SHA="${{ steps.set-info.outputs.commit_sha }}"
          VERSION="${{ steps.set-info.outputs.version }}"
          
          echo "Using commit: $COMMIT_SHA for version $VERSION"
          
          # Checkout the commit (could be a tag or a commit SHA)
          if git rev-parse "v$VERSION" >/dev/null 2>&1; then
            git checkout -b temp-release-branch "v$VERSION"
          else
            git checkout -b temp-release-branch "$COMMIT_SHA"
          fi
          
          # Now merge this into develop (without squashing)
          git checkout develop
          if git merge --no-ff temp-release-branch -m "Merge release v$VERSION into develop"; then
            git push origin develop
            echo "status=success" >> $GITHUB_OUTPUT
          else
            echo "status=conflict" >> $GITHUB_OUTPUT
            git merge --abort
          fi
          
          # Clean up
          git branch -D temp-release-branch

      # Create PR if there were conflicts
      - name: Create PR for develop if conflict
        if: steps.merge.outputs.status == 'conflict'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          branch: merge-release-${{ steps.set-info.outputs.version }}-to-develop
          base: develop
          title: "Merge release v${{ steps.set-info.outputs.version }} into develop"
          body: |
            # Merge release branch to develop
            
            This PR was automatically created because there were conflicts when trying to automatically merge 
            release v${{ steps.set-info.outputs.version }} back to develop.
            
            ## ⚠️ IMPORTANT
            
            Please resolve conflicts and use **"Create a merge commit"** (not squash) when merging this PR to preserve the git history.
            
            This ensures proper alignment between master and develop branches.
          labels: automated,merge-conflict