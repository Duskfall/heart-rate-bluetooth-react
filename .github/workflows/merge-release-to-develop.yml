name: Merge Release to Develop

on:
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write

jobs:
  merge-release-pr:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Find and merge release PR to develop
        run: |
          echo "Searching for release PRs targeting develop branch..."
          gh pr list --base develop --state open --json number,headRefName,title \
            --template '{{range .}}{{.number}} {{.headRefName}} {{.title}}{{"\n"}}{{end}}' > pr_list.txt
          
          if [ ! -s pr_list.txt ]; then
            echo "No open PRs found targeting develop branch."
            exit 0
          fi
          
          echo "Found the following open PRs targeting develop branch:"
          cat pr_list.txt
          
          while read -r PR_NUMBER HEAD_REF PR_TITLE; do
            echo "Checking PR #$PR_NUMBER: $HEAD_REF - $PR_TITLE"
            
            # Only process release PRs
            if [[ "$HEAD_REF" == release/* ]]; then
              echo "Found release PR #$PR_NUMBER with branch $HEAD_REF"
              
              # Retrieve PR details once to extract mergeable status and state
              PR_INFO=$(gh pr view "$PR_NUMBER" --json mergeable,mergeStateStatus,body,headRefName)
              MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
              MERGE_STATE=$(echo "$PR_INFO" | jq -r '.mergeStateStatus')
              echo "PR #$PR_NUMBER mergeable: $MERGEABLE, merge state: $MERGE_STATE"
              
              if [ "$MERGEABLE" != "MERGEABLE" ]; then
                echo "PR #$PR_NUMBER cannot be merged normally. Attempting force merge with admin privileges..."
                if gh pr merge "$PR_NUMBER" --merge; then
                  echo "Successfully merged PR #$PR_NUMBER to develop using admin privileges."
                  echo "HEAD_REF=$HEAD_REF" >> $GITHUB_ENV
                  break
                else
                  echo "Force merge failed for PR #$PR_NUMBER. Skipping."
                  continue
                fi
              fi
              
              echo "Merging PR #$PR_NUMBER to develop normally..."
              if gh pr merge "$PR_NUMBER" --merge; then
                echo "Successfully merged PR #$PR_NUMBER to develop."
                echo "HEAD_REF=$HEAD_REF" >> $GITHUB_ENV
                break
              else
                echo "Failed to merge PR #$PR_NUMBER. Skipping."
              fi
              
              # Stop after first successful merge
              break
            fi
          done < pr_list.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Check if branch should be cleaned up
        if: env.HEAD_REF != ''
        run: |
          RELEASE_BRANCH="${{ env.HEAD_REF }}"
          echo "Checking if branch $RELEASE_BRANCH should be cleaned up..."
          
          echo "Waiting 10 seconds for GitHub API to update..."
          sleep 10
          
          # Check merged status on both develop and main
          DEVELOP_MERGED=$(gh pr list --search "head:$RELEASE_BRANCH base:develop is:closed is:merged" --json number | jq length)
          MAIN_MERGED=$(gh pr list --search "head:$RELEASE_BRANCH base:main is:closed is:merged" --json number | jq length)
          
          echo "Merge status - Develop: $DEVELOP_MERGED, Main: $MAIN_MERGED"
          
          # If API hasn't yet updated for develop, assume it's merged
          if [ "$DEVELOP_MERGED" -eq 0 ]; then
            echo "Assuming develop merge status is updated. Setting DEVELOP_MERGED=1."
            DEVELOP_MERGED=1
          fi
          
          if [ "$DEVELOP_MERGED" -gt 0 ] && [ "$MAIN_MERGED" -gt 0 ]; then
            echo "Branch has been merged to both develop and main. Deleting branch..."
            gh api --method DELETE /repos/${{ github.repository }}/git/refs/heads/$RELEASE_BRANCH
            echo "✅ Release branch $RELEASE_BRANCH deleted."
          else
            echo "⏳ Branch has not been merged to both branches yet. Skipping cleanup."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
