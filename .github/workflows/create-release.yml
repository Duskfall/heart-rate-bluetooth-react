name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - production
          - pre-release

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create release branch and VERSION.md
        id: create_branch
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH="release/v$VERSION"
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          
          echo "Getting the latest commit SHA from the default branch"
          DEFAULT_BRANCH_SHA=$(gh api /repos/${{ github.repository }} --jq '.default_branch' | \
            xargs -I{} gh api /repos/${{ github.repository }}/git/refs/heads/{} --jq '.object.sha')
          
          echo "Creating release branch $RELEASE_BRANCH via GitHub API"
          gh api \
            --method POST \
            /repos/${{ github.repository }}/git/refs \
            -f ref="refs/heads/$RELEASE_BRANCH" \
            -f sha="$DEFAULT_BRANCH_SHA"
          
          # Create VERSION.md file content
          VERSION_CONTENT="# Release v$VERSION"
          ENCODED_CONTENT=$(echo -n "$VERSION_CONTENT" | base64 -w 0)
          
          echo "Attempting to create VERSION.md in the release branch"
          # Try direct creation first - this may fail with 422 if file exists
          CREATION_RESULT=$(gh api \
            --method PUT \
            /repos/${{ github.repository }}/contents/VERSION.md \
            -f message="chore: prepare release v$VERSION" \
            -f content="$ENCODED_CONTENT" \
            -f branch="$RELEASE_BRANCH" \
            -s 2>/dev/null || echo '{"status": "error"}')
          
          # Check if creation succeeded
          if [[ $(echo $CREATION_RESULT | jq -r '.status // empty') == "error" ]]; then
            echo "Direct creation failed. File might exist. Getting current file SHA..."
            
            # Get the SHA of the file in the default branch
            FILE_INFO=$(gh api /repos/${{ github.repository }}/contents/VERSION.md -s 2>/dev/null || echo '{"sha": ""}')
            FILE_SHA=$(echo $FILE_INFO | jq -r '.sha')
            
            if [[ -z "$FILE_SHA" || "$FILE_SHA" == "null" ]]; then
              echo "Could not get SHA from default branch. Trying release branch..."
              
              # Try getting SHA from the new branch 
              BRANCH_FILE_INFO=$(gh api /repos/${{ github.repository }}/contents/VERSION.md?ref=$RELEASE_BRANCH -s 2>/dev/null || echo '{"sha": ""}')
              FILE_SHA=$(echo $BRANCH_FILE_INFO | jq -r '.sha')
              
              if [[ -z "$FILE_SHA" || "$FILE_SHA" == "null" ]]; then
                echo "ERROR: Could not determine SHA for VERSION.md. Cannot proceed."
                exit 1
              fi
            fi
            
            echo "Updating VERSION.md with SHA: $FILE_SHA"
            gh api \
              --method PUT \
              /repos/${{ github.repository }}/contents/VERSION.md \
              -f message="chore: prepare release v$VERSION" \
              -f content="$ENCODED_CONTENT" \
              -f sha="$FILE_SHA" \
              -f branch="$RELEASE_BRANCH"
          else
            echo "Successfully created VERSION.md in release branch"
          fi
          
          echo "VERSION.md created/updated successfully in branch $RELEASE_BRANCH"
          
          # Checkout the release branch to continue with release notes etc.
          git fetch
          git checkout $RELEASE_BRANCH
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_DATE=$(date +"%b %d, %Y")
          
          # Find the most recent merge commit
          LAST_MERGE_HASH=$(git log --merges -n 1 --format="%H")
          
          # Create custom release notes
          {
            echo "# Release v$VERSION"
            echo ""
            echo "Commits on $RELEASE_DATE"
            
            # Get all non-merge commits since the last merge
            git log ${LAST_MERGE_HASH}..HEAD --no-merges --format="%s%n%an%n%an%ncommitted%n"
          } > RELEASE_NOTES.txt
          
          cat RELEASE_NOTES.txt
          
          # Save release notes to be used in subsequent steps
          RELEASE_NOTES="$(cat RELEASE_NOTES.txt)"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          generate_release_notes: false
          prerelease: ${{ github.event.inputs.release_type == 'pre-release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create PRs to develop and master
        id: create_prs
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH="${{ steps.create_branch.outputs.release_branch }}"
          
          # Create PR to develop
          DEVELOP_PR_URL=$(gh pr create --base develop --head $RELEASE_BRANCH --title "Merge release v$VERSION into develop" --body "${{ env.RELEASE_NOTES }}" --json url -q .url)
          echo "DEVELOP_PR_URL=$DEVELOP_PR_URL" >> $GITHUB_OUTPUT
          
          # Create PR to master
          MASTER_PR_URL=$(gh pr create --base master --head $RELEASE_BRANCH --title "Merge release v$VERSION into master" --body "${{ env.RELEASE_NOTES }}" --json url -q .url)
          echo "MASTER_PR_URL=$MASTER_PR_URL" >> $GITHUB_OUTPUT
          
          echo "Created PR to develop: $DEVELOP_PR_URL"
          echo "Created PR to master: $MASTER_PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}