name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - production
          - pre-release

# Make sure permissions are correctly set at the top level
permissions:
  contents: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    # Also set permissions explicitly at the job level
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Create release branch and update VERSION.md
        id: create_branch
        run: |
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_BRANCH="release/v$VERSION"
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          
          # Get default branch SHA
          DEFAULT_BRANCH=$(gh api /repos/${{ github.repository }} --jq '.default_branch')
          DEFAULT_BRANCH_SHA=$(gh api /repos/${{ github.repository }}/git/refs/heads/${DEFAULT_BRANCH} --jq '.object.sha')
          
          # Create release branch
          gh api --method POST /repos/${{ github.repository }}/git/refs \
            -f ref="refs/heads/$RELEASE_BRANCH" \
            -f sha="$DEFAULT_BRANCH_SHA"
          
          # Check if VERSION.md exists
          FILE_EXISTS=$(gh api -X HEAD /repos/${{ github.repository }}/contents/VERSION.md?ref=$RELEASE_BRANCH -s || echo $?)
          
          if [ "$FILE_EXISTS" != "404" ]; then
            # Get existing content and SHA
            FILE_INFO=$(gh api /repos/${{ github.repository }}/contents/VERSION.md?ref=$RELEASE_BRANCH)
            FILE_SHA=$(echo "$FILE_INFO" | jq -r '.sha')
            EXISTING_CONTENT=$(echo "$FILE_INFO" | jq -r '.content' | base64 -d)
            
            # Create temporary files for proper content handling
            echo "$EXISTING_CONTENT" > existing_content.md
            echo "" >> existing_content.md
            echo "# Release v$VERSION" >> existing_content.md
            echo "" >> existing_content.md
            echo "This file contains the current release version of the project." >> existing_content.md
            
            # Update file
            gh api --method PUT /repos/${{ github.repository }}/contents/VERSION.md \
              -f message="chore: append release v$VERSION information" \
              -f content="$(base64 -w 0 existing_content.md)" \
              -f sha="$FILE_SHA" \
              -f branch="$RELEASE_BRANCH"
          else
            # Create new file
            echo "# Release v$VERSION" > new_version.md
            echo "" >> new_version.md
            echo "This file contains the current release version of the project." >> new_version.md
            
            gh api --method PUT /repos/${{ github.repository }}/contents/VERSION.md \
              -f message="chore: create VERSION.md for release v$VERSION" \
              -f content="$(base64 -w 0 new_version.md)" \
              -f branch="$RELEASE_BRANCH"
          fi
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          RELEASE_DATE=$(date +"%b %d, %Y")
          
          # Create release notes
          echo "# Release v$VERSION" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          echo "Commits on $RELEASE_DATE" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md
          
          # Get commits since last tag or merge
          git log --no-merges --pretty=format:"- %s" -n 20 >> RELEASE_NOTES.md
          
          # Save release notes content
          RELEASE_NOTES="$(cat RELEASE_NOTES.md)"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Create main PR body with metadata
          cat RELEASE_NOTES.md > main_pr_body.md
          echo "" >> main_pr_body.md
          echo "---" >> main_pr_body.md
          echo "" >> main_pr_body.md
          echo "## Release Metadata" >> main_pr_body.md
          echo "- release_type: $RELEASE_TYPE" >> main_pr_body.md
          echo "- version: $VERSION" >> main_pr_body.md
      
      - name: Create PRs
        run: |
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_BRANCH="${{ steps.create_branch.outputs.release_branch }}"
          
          # Create PR to develop
          echo "Creating PR to develop branch..."
          gh pr create --base develop --head $RELEASE_BRANCH \
            --title "Merge release v$VERSION into develop" \
            --body "${{ env.RELEASE_NOTES }}"
          
          # Create PR to main
          echo "Creating PR to main branch..."
          gh pr create --base main --head $RELEASE_BRANCH \
            --title "Merge release v$VERSION into main" \
            --body-file main_pr_body.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}