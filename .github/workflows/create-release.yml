name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - production
          - pre-release

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create release branch
        id: create_branch
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH="release/v$VERSION"
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          
          echo "Creating release branch $RELEASE_BRANCH"
          # Create release branch via API to ensure verified commits
          gh api \
            --method POST \
            /repos/${{ github.repository }}/git/refs \
            -f ref="refs/heads/$RELEASE_BRANCH" \
            -f sha="${{ github.sha }}"
          
          git fetch
          git checkout $RELEASE_BRANCH
          
          # Create VERSION.md file content
          VERSION_CONTENT="# Release v$VERSION"
          
          echo "Preparing to create/update VERSION.md"
          
          # First try to get the file from the default branch (develop)
          # GitHub may require SHA even for files in other branches
          echo "Checking if VERSION.md exists in the default branch"
          DEFAULT_BRANCH_FILE=$(gh api /repos/${{ github.repository }}/contents/VERSION.md -s 2>/dev/null || echo "not_found")
          
          if [[ $DEFAULT_BRANCH_FILE != "not_found" ]]; then
            # File exists in default branch, use its SHA
            DEFAULT_SHA=$(echo $DEFAULT_BRANCH_FILE | jq -r .sha)
            echo "VERSION.md exists in default branch with SHA: $DEFAULT_SHA"
            
            # Check if it also exists in our release branch
            RELEASE_FILE=$(gh api /repos/${{ github.repository }}/contents/VERSION.md?ref=$RELEASE_BRANCH -s 2>/dev/null || echo "not_found")
            
            if [[ $RELEASE_FILE != "not_found" ]]; then
              # File exists in release branch, use that SHA
              FILE_SHA=$(echo $RELEASE_FILE | jq -r .sha)
              echo "VERSION.md exists in release branch with SHA: $FILE_SHA"
            else
              # File doesn't exist in release branch, use SHA from default branch
              FILE_SHA=$DEFAULT_SHA
              echo "VERSION.md doesn't exist in release branch, using default branch SHA"
            fi
            
            # Update file with SHA
            echo "Updating VERSION.md with SHA: $FILE_SHA"
            gh api \
              --method PUT \
              /repos/${{ github.repository }}/contents/VERSION.md \
              -f message="chore: prepare release v$VERSION" \
              -f content="$(echo -n "$VERSION_CONTENT" | base64 -w 0)" \
              -f sha="$FILE_SHA" \
              -f branch="$RELEASE_BRANCH"
          else
            # File really doesn't exist anywhere
            echo "VERSION.md does not exist in any branch, creating new file"
            
            # Create the file locally and commit it using git
            echo "$VERSION_CONTENT" > VERSION.md
            git add VERSION.md
            git config user.name "github-actions"
            git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
            git commit -m "chore: prepare release v$VERSION"
            git push origin $RELEASE_BRANCH
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_DATE=$(date +"%b %d, %Y")
          
          # Find the most recent merge commit
          LAST_MERGE_HASH=$(git log --merges -n 1 --format="%H")
          
          # Create custom release notes
          {
            echo "# Release v$VERSION"
            echo ""
            echo "Commits on $RELEASE_DATE"
            
            # Get all non-merge commits since the last merge
            git log ${LAST_MERGE_HASH}..HEAD --no-merges --format="%s%n%an%n%an%ncommitted%n"
          } > RELEASE_NOTES.txt
          
          cat RELEASE_NOTES.txt
          
          # Save release notes to be used in subsequent steps
          RELEASE_NOTES="$(cat RELEASE_NOTES.txt)"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          generate_release_notes: false
          prerelease: ${{ github.event.inputs.release_type == 'pre-release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create PRs to develop and master
        id: create_prs
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH="${{ steps.create_branch.outputs.release_branch }}"
          
          # Create PR to develop
          DEVELOP_PR_URL=$(gh pr create --base develop --head $RELEASE_BRANCH --title "Merge release v$VERSION into develop" --body "${{ env.RELEASE_NOTES }}" --json url -q .url)
          echo "DEVELOP_PR_URL=$DEVELOP_PR_URL" >> $GITHUB_OUTPUT
          
          # Create PR to master
          MASTER_PR_URL=$(gh pr create --base master --head $RELEASE_BRANCH --title "Merge release v$VERSION into master" --body "${{ env.RELEASE_NOTES }}" --json url -q .url)
          echo "MASTER_PR_URL=$MASTER_PR_URL" >> $GITHUB_OUTPUT
          
          echo "Created PR to develop: $DEVELOP_PR_URL"
          echo "Created PR to master: $MASTER_PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}