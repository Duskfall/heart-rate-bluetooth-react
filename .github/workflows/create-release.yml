name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - production
          - pre-release
      release_notes:
        description: 'Custom release notes (optional)'
        required: false
        type: string

jobs:
  create-release:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          
      - name: Create release branch
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH="release/v$VERSION"
          
          # Configure git
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          
          # Create and switch to the release branch
          git checkout -b $RELEASE_BRANCH
          
          # Create a dummy commit for testing
          echo "# Release v$VERSION" >> RELEASE_NOTES.md
          
          # If custom release notes were provided, add them
          if [[ -n "${{ github.event.inputs.release_notes }}" ]]; then
            echo "" >> RELEASE_NOTES.md
            echo "${{ github.event.inputs.release_notes }}" >> RELEASE_NOTES.md
          fi
          
          git add RELEASE_NOTES.md
          git commit -m "chore: prepare release v$VERSION"
          
          # Push the release branch
          git push origin $RELEASE_BRANCH
      
      - name: Create tag
        run: |
          VERSION=${{ github.event.inputs.version }}
          TAG="v$VERSION"
          git tag $TAG
          git push origin $TAG
      
      - name: Generate Previous Tag
        id: prev_tag
        run: |
          CURRENT_TAG="v${{ github.event.inputs.version }}"
          PREV_TAG=$(git tag --sort=-creatordate | grep -v "$CURRENT_TAG" | head -n 1)
          echo "Found previous tag: $PREV_TAG"
          echo "prev_tag=$PREV_TAG" >> $GITHUB_OUTPUT
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: |
            ## Release v${{ github.event.inputs.version }}
            
            ${{ github.event.inputs.release_notes }}
            
            ### Changes since ${{ steps.prev_tag.outputs.prev_tag }}:
            
            ${{ github.event.inputs.release_notes != '' && github.event.inputs.release_notes || 'Automated release' }}
          generate_release_notes: true
          prerelease: ${{ github.event.inputs.release_type == 'pre-release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create PRs to develop and master
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH="release/v$VERSION"
          
          # GitHub CLI is pre-installed on GitHub-hosted runners
          # Create PR to develop
          gh pr create --base develop --head $RELEASE_BRANCH --title "Merge release v$VERSION into develop" --body "Automated PR to merge release v$VERSION into develop branch"
          
          # Create PR to master
          gh pr create --base master --head $RELEASE_BRANCH --title "Merge release v$VERSION into master" --body "Automated PR to merge release v$VERSION into master branch"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} 