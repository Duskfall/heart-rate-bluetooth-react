name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - production
          - pre-release

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}
          persist-credentials: true
      
      - name: Set up Git committer identity
        run: |
          git config --global user.name "github-actions"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
      - name: Create release branch
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH="release/v$VERSION"
          
          # Create and switch to the release branch
          git checkout -b $RELEASE_BRANCH
          
          # Create a reference file for the release version
          echo "# Release v$VERSION" > VERSION.md
          git add VERSION.md
          
          # Commit with verified signature
          GIT_COMMITTER_NAME="github-actions" \
          GIT_COMMITTER_EMAIL="41898282+github-actions[bot]@users.noreply.github.com" \
          GIT_AUTHOR_NAME="github-actions" \
          GIT_AUTHOR_EMAIL="41898282+github-actions[bot]@users.noreply.github.com" \
          git commit -m "chore: prepare release v$VERSION"
          
          # Push the release branch
          git push origin $RELEASE_BRANCH
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_DATE=$(date +"%b %d, %Y")
          
          # Find the most recent merge commit
          LAST_MERGE_HASH=$(git log --merges -n 1 --format="%H")
          
          # Create custom release notes
          {
            echo "# Release v$VERSION"
            echo ""
            echo "Commits on $RELEASE_DATE"
            
            # Get all non-merge commits since the last merge
            git log ${LAST_MERGE_HASH}..HEAD --no-merges --format="%s%n%an%n%an%ncommitted%n"
          } > RELEASE_NOTES.txt
          
          cat RELEASE_NOTES.txt
          
          # Save release notes to be used in subsequent steps
          RELEASE_NOTES="$(cat RELEASE_NOTES.txt)"
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
      
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.event.inputs.version }}
          name: Release v${{ github.event.inputs.version }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          generate_release_notes: false
          prerelease: ${{ github.event.inputs.release_type == 'pre-release' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create PRs to develop and master
        id: create_prs
        run: |
          VERSION=${{ github.event.inputs.version }}
          RELEASE_BRANCH="release/v$VERSION"
          
          # Create PR to develop
          DEVELOP_PR_URL=$(gh pr create --base develop --head $RELEASE_BRANCH --title "Merge release v$VERSION into develop" --body "${{ env.RELEASE_NOTES }}" --json url -q .url)
          echo "DEVELOP_PR_URL=$DEVELOP_PR_URL" >> $GITHUB_OUTPUT
          
          # Create PR to master
          MASTER_PR_URL=$(gh pr create --base master --head $RELEASE_BRANCH --title "Merge release v$VERSION into master" --body "${{ env.RELEASE_NOTES }}" --json url -q .url)
          echo "MASTER_PR_URL=$MASTER_PR_URL" >> $GITHUB_OUTPUT
          
          echo "Created PR to develop: $DEVELOP_PR_URL"
          echo "Created PR to master: $MASTER_PR_URL"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}