name: Create Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Version number (e.g., 1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Release type'
        required: true
        type: choice
        options:
          - production
          - pre-release

permissions:
  contents: write
  pull-requests: write

jobs:
  create-release:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      
      - name: Create release branch and update VERSION.md
        id: create_branch
        run: |
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_BRANCH="release/v$VERSION"
          echo "release_branch=$RELEASE_BRANCH" >> $GITHUB_OUTPUT
          
          # Get the default branch and its latest commit SHA
          DEFAULT_BRANCH=$(gh api /repos/${{ github.repository }} --jq '.default_branch')
          DEFAULT_BRANCH_SHA=$(gh api /repos/${{ github.repository }}/git/refs/heads/${DEFAULT_BRANCH} --jq '.object.sha')
          
          # Create the release branch from the default branch commit SHA
          gh api --method POST /repos/${{ github.repository }}/git/refs \
            -f ref="refs/heads/$RELEASE_BRANCH" \
            -f sha="$DEFAULT_BRANCH_SHA"
          
          # Check if VERSION.md already exists on the new release branch
          if gh api -X HEAD /repos/${{ github.repository }}/contents/VERSION.md?ref=$RELEASE_BRANCH -q 'true' 2>/dev/null; then
            # Get existing content and SHA
            FILE_INFO=$(gh api /repos/${{ github.repository }}/contents/VERSION.md?ref=$RELEASE_BRANCH)
            FILE_SHA=$(echo "$FILE_INFO" | jq -r '.sha')
            EXISTING_CONTENT=$(echo "$FILE_INFO" | jq -r '.content' | base64 -d)
            
            # Append new release info to existing content
            {
              echo "$EXISTING_CONTENT"
              echo ""
              echo "# Release v$VERSION"
              echo ""
              echo "This file contains the current release version of the project."
            } > updated_VERSION.md
            
            # Update VERSION.md
            gh api --method PUT /repos/${{ github.repository }}/contents/VERSION.md \
              -f message="chore: append release v$VERSION information" \
              -f content="$(base64 -w 0 updated_VERSION.md)" \
              -f sha="$FILE_SHA" \
              -f branch="$RELEASE_BRANCH"
          else
            # Create a new VERSION.md file
            {
              echo "# Release v$VERSION"
              echo ""
              echo "This file contains the current release version of the project."
            } > new_VERSION.md
            
            gh api --method PUT /repos/${{ github.repository }}/contents/VERSION.md \
              -f message="chore: create VERSION.md for release v$VERSION" \
              -f content="$(base64 -w 0 new_VERSION.md)" \
              -f branch="$RELEASE_BRANCH"
          fi
      
      - name: Generate release notes
        id: release_notes
        run: |
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_TYPE="${{ github.event.inputs.release_type }}"
          RELEASE_DATE=$(date +"%b %d, %Y")
          
          # Start release notes file
          {
            echo "# Release v$VERSION"
            echo ""
            echo "## Changes"
            echo ""
          } > RELEASE_NOTES.md
          
          # Determine reference point from latest release tag (if any)
          LATEST_TAG=$(git tag --sort=-v:refname | grep -E "^v[0-9]+\.[0-9]+\.[0-9]+" | head -n1 || echo "")
          if [ -z "$LATEST_TAG" ]; then
            echo "No release tag found; using the last 10 commits as reference."
            REFERENCE_POINT="HEAD~10"
          else
            echo "Using latest tag as reference point: $LATEST_TAG"
            REFERENCE_POINT="$LATEST_TAG"
          fi
          
          # Retrieve commit messages from the develop branch since the reference point
          RELEASE_COMMITS=$(git log --no-merges "$REFERENCE_POINT..develop" --pretty=format:"- %s" | grep -v "chore: append release v" || true)
          
          if [ -n "$RELEASE_COMMITS" ]; then
            echo "$RELEASE_COMMITS" >> RELEASE_NOTES.md
          else
            echo "- No specific changes found for this release" >> RELEASE_NOTES.md
          fi
          
          # Export release notes for use in PR creation
          RELEASE_NOTES_CONTENT=$(cat RELEASE_NOTES.md)
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES_CONTENT" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          # Build the PR body for the main branch with metadata
          {
            cat RELEASE_NOTES.md
            echo ""
            echo "---"
            echo ""
            echo "## Release Metadata"
            echo "- release_type: $RELEASE_TYPE"
            echo "- version: $VERSION"
          } > main_pr_body.md
      
      - name: Create PRs
        run: |
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_BRANCH="${{ steps.create_branch.outputs.release_branch }}"
          
          # Create a pull request to the develop branch
          gh pr create --base develop --head "$RELEASE_BRANCH" \
            --title "Merge release v$VERSION into develop" \
            --body "${{ env.RELEASE_NOTES }}"
          
          # Create a pull request to the main branch with additional metadata
          gh pr create --base main --head "$RELEASE_BRANCH" \
            --title "Merge release v$VERSION into main" \
            --body-file main_pr_body.md
