name: Merge Release to Main and Create Release

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  merge-and-release:
    # Only run if not a pull_request event OR if the pull request is merged and its head branch starts with "release/"
    if: github.event_name != 'pull_request' || (github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      
      # For workflow_dispatch events, find and merge release PRs targeting main.
      - name: Find and merge release PR to main
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Searching for release PRs targeting main branch..."
          gh pr list --base main --state open --json number,headRefName,title \
            --template '{{range .}}{{.number}} {{.headRefName}} {{.title}}{{"\n"}}{{end}}' > pr_list.txt
          
          if [ ! -s pr_list.txt ]; then
            echo "No open PRs found targeting main branch"
            exit 0
          fi
          
          echo "Found the following open PRs targeting main branch:"
          cat pr_list.txt
          
          while read -r PR_NUMBER HEAD_REF PR_TITLE; do
            echo "Checking PR #$PR_NUMBER: $HEAD_REF - $PR_TITLE"
            if [[ "$HEAD_REF" == release/* ]]; then
              echo "Found release PR #$PR_NUMBER with branch $HEAD_REF"
              
              # Get PR details once (mergeable status and merge state)
              PR_INFO=$(gh pr view "$PR_NUMBER" --json mergeable,mergeStateStatus,body,headRefName)
              MERGEABLE=$(echo "$PR_INFO" | jq -r '.mergeable')
              MERGE_STATE=$(echo "$PR_INFO" | jq -r '.mergeStateStatus')
              echo "PR #$PR_NUMBER mergeable: $MERGEABLE, merge state: $MERGE_STATE"
              
              # Attempt merge – if not mergeable normally, try with admin privileges.
              if [ "$MERGEABLE" != "MERGEABLE" ]; then
                echo "PR #$PR_NUMBER cannot be merged normally. Attempting force merge with admin privileges..."
                if gh pr merge "$PR_NUMBER" --merge; then
                  echo "Successfully merged PR #$PR_NUMBER using admin privileges."
                  echo "MERGED_PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
                  echo "MERGED_PR_HEAD_REF=$HEAD_REF" >> $GITHUB_ENV
                  break
                else
                  echo "Force merge failed for PR #$PR_NUMBER. Skipping."
                  continue
                fi
              fi
              
              echo "Merging PR #$PR_NUMBER normally..."
              if gh pr merge "$PR_NUMBER" --merge; then
                echo "Successfully merged PR #$PR_NUMBER to main."
                echo "MERGED_PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
                echo "MERGED_PR_HEAD_REF=$HEAD_REF" >> $GITHUB_ENV
                break
              else
                echo "Failed to merge PR #$PR_NUMBER. Skipping."
              fi
            fi
          done < pr_list.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract release information
        id: extract_info
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull_request events, extract details from the PR body.
            PR_BODY="${{ github.event.pull_request.body }}"
            VERSION=$(echo "$PR_BODY" | grep -oP '(?<=- version: )\S+' || echo "")
            RELEASE_TYPE=$(echo "$PR_BODY" | grep -oP '(?<=- release_type: )\S+' || echo "production")
            RELEASE_BODY=$(echo "$PR_BODY" | awk '/^# Release/,/## Release Metadata/' | sed '/## Release Metadata/d')
            
            if [ -n "$RELEASE_BODY" ]; then
              echo "$RELEASE_BODY" > release_notes.md
            else
              PR_NUMBER="${{ github.event.pull_request.number }}"
              echo "Fetching commits for PR #$PR_NUMBER..."
              COMMITS=$(gh pr view "$PR_NUMBER" --json commits --template '{{range .commits}}{{.messageHeadline}}{{"\n"}}{{end}}')
              {
                echo "# Release v$VERSION"
                echo ""
                echo "## Changes"
                echo ""
                echo "$COMMITS" | grep -v '^$' | grep -v "^Merge " | grep -v "chore: append release v" | sed 's/^/- /'
              } > release_notes.md
            fi
          else
            # For workflow_dispatch events, use merged PR details.
            if [ -n "$MERGED_PR_NUMBER" ] && [ -n "$MERGED_PR_HEAD_REF" ]; then
              PR_NUMBER=$MERGED_PR_NUMBER
              HEAD_REF=$MERGED_PR_HEAD_REF
              VERSION=$(echo "$HEAD_REF" | sed 's/release\/v//')
              PR_BODY=$(gh pr view "$PR_NUMBER" --json body --template '{{.body}}')
              RELEASE_BODY=$(echo "$PR_BODY" | awk '/^# Release/,/## Release Metadata/' | sed '/## Release Metadata/d')
              
              if [ -n "$RELEASE_BODY" ]; then
                echo "$RELEASE_BODY" > release_notes.md
              else
                echo "Fetching commits for PR #$PR_NUMBER..."
                COMMITS=$(gh pr view "$PR_NUMBER" --json commits --template '{{range .commits}}{{.messageHeadline}}{{"\n"}}{{end}}')
                RELEASE_TYPE="production"
                {
                  echo "# Release v$VERSION"
                  echo ""
                  echo "## Changes"
                  echo ""
                  echo "$COMMITS" | grep -v '^$' | grep -v "^Merge " | grep -v "chore: append release v" | sed 's/^/- /'
                } > release_notes.md
              fi
            else
              echo "No merged PR information found. Exiting."
              exit 0
            fi
          fi
          
          RELEASE_NOTES=$(cat release_notes.md)
          
          # If version is still empty, try to extract from HEAD_REF pattern
          if [ -z "$VERSION" ] && [[ -n "$HEAD_REF" ]] && [[ "$HEAD_REF" =~ release/v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          
          # Export release notes for later steps
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "Processing release v$VERSION ($RELEASE_TYPE)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub Release
        if: steps.extract_info.outputs.version != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.extract_info.outputs.version }}
          name: Release v${{ steps.extract_info.outputs.version }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          generate_release_notes: false
          prerelease: ${{ steps.extract_info.outputs.release_type == 'pre-release' }}
          target_commitish: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      - name: Check if branch should be cleaned up
        if: github.event_name == 'workflow_dispatch' && success() && env.MERGED_PR_HEAD_REF != ''
        run: |
          RELEASE_BRANCH="${{ env.MERGED_PR_HEAD_REF }}"
          echo "Checking if branch $RELEASE_BRANCH should be cleaned up..."
          echo "Waiting 10 seconds for GitHub API to update..."
          sleep 10
          DEVELOP_MERGED=$(gh pr list --search "head:$RELEASE_BRANCH base:develop is:closed is:merged" --json number | jq length)
          MAIN_MERGED=$(gh pr list --search "head:$RELEASE_BRANCH base:main is:closed is:merged" --json number | jq length)
          echo "Merge status - Develop: $DEVELOP_MERGED, Main: $MAIN_MERGED"
          if [ "$MAIN_MERGED" -eq 0 ]; then
            echo "Setting main merged flag as API may be delayed."
            MAIN_MERGED=1
          fi
          if [ "$DEVELOP_MERGED" -gt 0 ] && [ "$MAIN_MERGED" -gt 0 ]; then
            echo "Branch has been merged to both develop and main. Deleting..."
            gh api --method DELETE /repos/${{ github.repository }}/git/refs/heads/$RELEASE_BRANCH
            echo "✅ Release branch $RELEASE_BRANCH deleted."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
