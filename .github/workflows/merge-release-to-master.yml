name: Merge Release to Main and Create Release

on:
  workflow_dispatch:
  pull_request:
    types: [closed]
    branches:
      - main

permissions:
  contents: write
  pull-requests: write

jobs:
  merge-and-release:
    if: github.event_name != 'pull_request' || (github.event.pull_request.merged == true && startsWith(github.head_ref, 'release/'))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Set up GitHub CLI
        run: |
          gh auth login --with-token <<< "${{ secrets.GITHUB_TOKEN }}"
      
      # Only run for manual workflow dispatch
      - name: Find and merge release PR to main
        if: github.event_name == 'workflow_dispatch'
        run: |
          echo "Searching for release PRs targeting main branch..."
          
          # List all OPEN PRs in a simple format
          gh pr list --base main --state open --json number,headRefName,title --template '{{range .}}{{.number}} {{.headRefName}} {{.title}}{{"\n"}}{{end}}' > pr_list.txt
          
          if [ ! -s pr_list.txt ]; then
            echo "No open PRs found targeting main branch"
            exit 0
          fi
          
          echo "Found the following open PRs targeting main branch:"
          cat pr_list.txt
          
          # Process each PR
          while read PR_NUMBER HEAD_REF PR_TITLE; do
            echo "Checking PR #$PR_NUMBER: $HEAD_REF - $PR_TITLE"
            
            # Only process release PRs with clear pattern matching
            if [[ "$HEAD_REF" == release/* ]]; then
              echo "Found release PR #$PR_NUMBER with branch $HEAD_REF"
              
              # Get detailed PR info for debugging
              echo "Getting PR details..."
              gh pr view $PR_NUMBER --json mergeable,mergeStateStatus,reviewDecision,baseRefName,headRefName > pr_details.json
              cat pr_details.json
              
              # Check if PR can be merged
              MERGEABLE=$(gh pr view $PR_NUMBER --json mergeable --template "{{.mergeable}}")
              MERGE_STATE=$(gh pr view $PR_NUMBER --json mergeStateStatus --template "{{.mergeStateStatus}}")
              
              echo "PR #$PR_NUMBER mergeable status: $MERGEABLE"
              echo "PR #$PR_NUMBER merge state: $MERGE_STATE"
              
              if [ "$MERGEABLE" != "MERGEABLE" ]; then
                echo "PR #$PR_NUMBER cannot be merged due to mergeable status: $MERGEABLE"
                
                # Try to force merge anyway with --admin flag
                echo "Attempting to force merge with admin privileges..."
                if gh pr merge $PR_NUMBER --admin --merge; then
                  echo "Successfully merged PR #$PR_NUMBER to main using admin privileges"
                  break
                else
                  echo "Failed to merge PR #$PR_NUMBER even with admin privileges. Skipping."
                  continue
                fi
              fi
              
              # Merge the PR
              echo "Merging PR #$PR_NUMBER to main normally..."
              if gh pr merge $PR_NUMBER --admin --merge; then
                echo "Successfully merged PR #$PR_NUMBER to main"
                
                # Save the PR number for later use
                echo "MERGED_PR_NUMBER=$PR_NUMBER" >> $GITHUB_ENV
                echo "MERGED_PR_HEAD_REF=$HEAD_REF" >> $GITHUB_ENV
                break
              else
                echo "Failed to merge PR #$PR_NUMBER. Skipping."
              fi
              
              # Break after first successful merge
              break
            fi
          done < pr_list.txt
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract release information
        id: extract_info
        run: |
          if [ "${{ github.event_name }}" = "pull_request" ]; then
            # For pull request events, extract from the PR body
            PR_BODY="${{ github.event.pull_request.body }}"
            VERSION=$(echo "$PR_BODY" | grep -oP -- "- version: \K[^\s]*" || echo "")
            RELEASE_TYPE=$(echo "$PR_BODY" | grep -oP -- "- release_type: \K[^\s]*" || echo "production")
            
            # Extract release notes using gh CLI for better parsing
            # First get PR number
            PR_NUMBER="${{ github.event.pull_request.number }}"
            
            # Get the PR commits only (not all past commits)
            echo "Getting commits specific to this PR..."
            COMMITS=$(gh pr view $PR_NUMBER --json commits --template '{{range .commits}}{{.messageHeadline}}{{"\n"}}{{end}}')
            
            # Generate clean release notes with only PR-specific commits
            {
              echo "# Release v$VERSION"
              echo ""
              echo "Commits for release v$VERSION:"
              echo ""
              echo "$COMMITS" | while read -r line; do
                # Only include non-empty lines and skip merge commits
                if [[ -n "$line" && ! "$line" =~ ^Merge ]]; then
                  echo "- $line"
                fi
              done
            } > release_notes.md
            
            RELEASE_NOTES=$(cat release_notes.md)
          else
            # For workflow_dispatch events, extract from the merged PR
            if [ -n "$MERGED_PR_NUMBER" ] && [ -n "$MERGED_PR_HEAD_REF" ]; then
              # Use the PR we just merged
              PR_NUMBER=$MERGED_PR_NUMBER
              HEAD_REF=$MERGED_PR_HEAD_REF
              
              # Extract version from branch name
              VERSION=$(echo "$HEAD_REF" | sed 's/release\/v//')
              
              # Get PR details
              PR_INFO=$(gh pr view $PR_NUMBER --json commits,title --template '{"title":"{{.title}}","commits":[{{range .commits}}{"message":"{{.messageHeadline}}"},{{end}}]}' | sed 's/,]}$/]}/')
              
              # Extract release type
              RELEASE_TYPE="production"
              
              # Generate release notes from PR commits
              {
                echo "# Release v$VERSION"
                echo ""
                echo "Commits for release v$VERSION:"
                echo ""
                echo "$PR_INFO" | jq -r '.commits[].message' | while read -r line; do
                  # Only include non-empty lines and skip merge commits
                  if [[ -n "$line" && ! "$line" =~ ^Merge ]]; then
                    echo "- $line"
                  fi
                done
              } > release_notes.md
              
              RELEASE_NOTES=$(cat release_notes.md)
            else
              # Couldn't find a merged PR, exit gracefully
              echo "No PR was merged in this run"
              exit 0
            fi
          fi
          
          # If version is empty, try to extract from branch name
          if [ -z "$VERSION" ] && [[ -n "$HEAD_REF" ]] && [[ "$HEAD_REF" =~ release/v([0-9]+\.[0-9]+\.[0-9]+) ]]; then
            VERSION="${BASH_REMATCH[1]}"
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "release_type=$RELEASE_TYPE" >> $GITHUB_OUTPUT
          
          # Save release notes to be used in subsequent steps
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "$RELEASE_NOTES" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV
          
          echo "Processing release v$VERSION ($RELEASE_TYPE)"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Create GitHub Release
        if: steps.extract_info.outputs.version != ''
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.extract_info.outputs.version }}
          name: Release v${{ steps.extract_info.outputs.version }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          generate_release_notes: false
          prerelease: ${{ steps.extract_info.outputs.release_type == 'pre-release' }}
          target_commitish: main
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          
      # Check if we should trigger cleanup (for manual workflow runs)
      - name: Check if branch should be cleaned up
        if: github.event_name == 'workflow_dispatch' && success() && env.MERGED_PR_HEAD_REF != ''
        run: |
          RELEASE_BRANCH="${{ env.MERGED_PR_HEAD_REF }}"
          echo "Checking if $RELEASE_BRANCH should be cleaned up..."
          
          # Check if the branch has been merged to both develop and main
          DEVELOP_MERGED=$(gh pr list --search "head:$RELEASE_BRANCH base:develop is:closed is:merged" --json number | jq length)
          MAIN_MERGED=$(gh pr list --search "head:$RELEASE_BRANCH base:main is:closed is:merged" --json number | jq length)
          
          echo "Merge status - Develop: $DEVELOP_MERGED, Main: $MAIN_MERGED"
          
          if [ "$DEVELOP_MERGED" -gt 0 ] && [ "$MAIN_MERGED" -gt 0 ]; then
            echo "Branch has been merged to both develop and main. Deleting..."
            gh api --method DELETE /repos/${{ github.repository }}/git/refs/heads/$RELEASE_BRANCH
            echo "✅ Release branch $RELEASE_BRANCH deleted."
          else
            echo "⏳ Branch has not been merged to both branches yet. Skipping cleanup."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}